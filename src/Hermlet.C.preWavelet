# include <adouble.h>
# include "Hermlet.h"
# include "World.h"
# include "DOF.h"
# include "Stage.h"

Hermlet::Hermlet(Stage *const s, double from, double to) :
   Fun(s,from,to),
   xIx(S->claimVars(S->N*2+2)),
   cIx(-1),
   eIx(-1)
{
   testN();
}

Hermlet::Hermlet(Stage *const s, double from, double to,
		 double min, double max) :
   Fun(s,from,to,min,max),
   xIx(S->claimVars(S->N*2+2)),
   cIx(S->claimCons(S->N*2)),
   eIx(-1)
{
   testN();
   S->Register((Constraint *) this);
}

Hermlet::Hermlet(Stage *const s, DOF *const d, double from, double to) :
   Fun(s,d,from,to),
   xIx(S->claimVars(S->N*2+2)),
   cIx(-1),
   eIx(S->W->ImplicitMuscles ? -1 : S->claimCons(S->N*2))
{
   testN();
}

Hermlet::Hermlet(Stage *const s, DOF *const d, double from, double to,
		 double min, double max) :
   Fun(s,d,from,to,min,max),
   xIx(S->claimVars(S->N*2+2)),
   cIx(S->claimCons(S->N*2)),
   eIx(S->W->ImplicitMuscles ? -1 : S->claimCons(S->N*2))
{
   testN();
   S->Register((Constraint *) this);
}

double Hermlet::s1Val(double t) const {
   if (t < 0) {
      if (t < -1) return 0;
      return square(t+1)*(1-2*t);
   }
   if (t > 1) return 0;
   return square(1-t)*(t*2+1);
}

double Hermlet::s1Dot(double t) const {
   if (t < 0) {
      if (t < -1) return 0;
      return -6*t*(t+1);
   }
   if (t > 1) return 0;
   return 6*t*(t-1);
}

double Hermlet::s1Bis(double t) const {
   if (t < 0) {
      if (t < -1) return 0;
      return -12*t - 6;
   }
   if (t > 1) return 0;
   return 12*t - 6;
}

double Hermlet::s2Val(double t) const {
   if (t < 0) {
      if (t < -1) return 0;
      return t*square(t+1);
   }
   if (t > 1) return 0;
   return t*square(t-1);
}

double Hermlet::s2Dot(double t) const {
   if (t < 0) {
      if (t < -1) return 0;
      return 3*t*t+4*t+1;
   }
   if (t > 1) return 0;
   return 3*t*t - 4*t + 1;
}

double Hermlet::s2Bis(double t) const {
   if (t < 0) {
      if (t < -1) return 0;
      return 6*t + 4;
   }
   if (t > 1) return 0;
   return 6*t - 4;
}


double Hermlet::w1Val(double t) const {
   assert(t >= -1.0 && t <= 1.0);
   return 1 *
      (-2*s1Val(2*t + 1) + 4*s1Val(2*t) - 2*s1Val(2*t - 1)
       - 21*s2Val(2*t + 1) + 21*s2Val(2*t - 1));
}
double Hermlet::w1Dot(double t) const {
   assert(t >= -1.0 && t <= 1.0);
   return 2 *
      (-2*s1Dot(2*t + 1) + 4*s1Dot(2*t) - 2*s1Dot(2*t - 1)
       - 21*s2Dot(2*t + 1) + 21*s2Dot(2*t - 1));
}
double Hermlet::w1Bis(double t) const {
   assert(t >= -1.0 && t <= 1.0);
   return 4 *
      (-2*s1Bis(2*t + 1) + 4*s1Bis(2*t) - 2*s1Bis(2*t - 1)
       - 21*s2Bis(2*t + 1) + 21*s2Bis(2*t - 1));
}

double Hermlet::w2Val(double t) const {
   assert(t >= -1.0 && t <= 1.0);
   return 1 *
      (1*s1Val(2*t + 1) - 1*s1Val(2*t - 1)
       + 9*s2Val(2*t + 1) + 12*s2Val(2*t) + 9*s2Val(2*t - 1));
}
double Hermlet::w2Dot(double t) const {
   assert(t >= -1.0 && t <= 1.0);
   return 2 *
      (1*s1Dot(2*t + 1) - 1*s1Dot(2*t - 1)
       + 9*s2Dot(2*t + 1) + 12*s2Dot(2*t) + 9*s2Dot(2*t - 1));
}
double Hermlet::w2Bis(double t) const {
   assert(t >= -1.0 && t <= 1.0);
   return 4 *
      (1*s1Bis(2*t + 1) - 1*s1Bis(2*t - 1)
       + 9*s2Bis(2*t + 1) + 12*s2Bis(2*t) + 9*s2Bis(2*t - 1));
}


void Hermlet::SnapShot(const adoublev &x, int slice, double t) {
   int ix = xIx + 2*slice;

   assert(ix >= xIx);
   assert(ix+3 < xIx + (S->N*2+2));

   Val = (x[ix+0] * s1Val(t)  +  x[ix+2] * s1Val(t-1)  +
	  x[ix+1] * s2Val(t)  +  x[ix+3] * s2Val(t-1));

   Dot = (x[ix+0] * s1Dot(t)  +  x[ix+2] * s1Dot(t-1)  +
	  x[ix+1] * s2Dot(t)  +  x[ix+3] * s2Dot(t-1));

   Bis = (x[ix+0] * s1Bis(t)  +  x[ix+2] * s1Bis(t-1)  +
	  x[ix+1] * s2Bis(t)  +  x[ix+3] * s2Bis(t-1));

   Dot /= S->h;
   Bis /= (S->h * S->h);
}

void Hermlet::Initialize(Omu_VariableVec &x, Omu_VariableVec &c) {
   if (cIx >= 0) {
      cerr << "Constraining indices [" << cIx << " - " << cIx+4*S->N << "] to lie between [" << Min << " - " << Max << "]\n";
      for (int i = 0; i < S->N; i ++) {
	 c.min[cIx+i*2] = Min; c.max[cIx+i*2] = Max;
	 c.min[cIx+i*2+1] = Min; c.max[cIx+i*2+1] = Max;
      }
   }
//   cerr << "Constraints [" << Min << ", " << Max << "] -> [" << -(Max-Min)/value(S->h) << ", " << (Max-Min)/value(S->h) << "]\n";
//   for (int i = 0; i <= S->N; i ++) {
//      x.min[xIx+i*2+0] = Min;
//      x.max[xIx+i*2+0] = Max;
//      x.initial[xIx+i*2+0] = From + i*(To-From)/S->N;
//   }
}

void Hermlet::Evaluate(const adoublev &x, adoublev &c) {
   if (cIx >= 0) {
      for (int i = 0; i < S->N; i ++) {
//      cerr << "Evaluating indices [" << (cIx+i*P+1) << " - " << (cIx+i*P+P) << "] as {";
	 SnapShot(x, i, 0.3); c[cIx+i*2] = Val;
	 SnapShot(x, i, 0.7); c[cIx+i*2+1] = Val;
      }
   }
}

void Hermlet::IntegrateFEM(adoublev &c, adouble qM, adouble qC,
			   int slice, double t, double weight) const {
   if (eIx < 0) {
      return;
   }

   int ix = eIx + 2*slice - 1;

   qC *= S->h;

   if (slice != 0) {
      // skip left-most value-interpolating trial function
      c[ix ++] += weight * (s1Dot(t)*qM + s1Val(t)*qC);
   } else {
      ix ++;
   }
   c[ix ++] += weight * (s2Dot(t)*qM + s2Val(t)*qC);
   if (slice != S->N-1) {
      // and right-most too
      c[ix ++] += weight * (s1Dot(t-1)*qM + s1Val(t-1)*qC);
   }
   c[ix ++] += weight * (s2Dot(t-1)*qM + s2Val(t-1)*qC);
}
